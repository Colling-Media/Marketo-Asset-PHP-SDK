<?php
/**
 * SendSampleEmailRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CollingMedia\Client\Model;

use \ArrayAccess;

/**
 * SendSampleEmailRequest Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SendSampleEmailRequest implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SendSampleEmailRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'email_address' => 'string',
        'email_id' => 'int',
        'lead_id' => 'string',
        'permutation_codes' => 'string',
        'text_only' => 'bool',
        'trigger_object' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'email_address' => 'emailAddress',
        'email_id' => 'emailId',
        'lead_id' => 'leadId',
        'permutation_codes' => 'permutationCodes',
        'text_only' => 'textOnly',
        'trigger_object' => 'triggerObject'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'email_address' => 'setEmailAddress',
        'email_id' => 'setEmailId',
        'lead_id' => 'setLeadId',
        'permutation_codes' => 'setPermutationCodes',
        'text_only' => 'setTextOnly',
        'trigger_object' => 'setTriggerObject'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'email_address' => 'getEmailAddress',
        'email_id' => 'getEmailId',
        'lead_id' => 'getLeadId',
        'permutation_codes' => 'getPermutationCodes',
        'text_only' => 'getTextOnly',
        'trigger_object' => 'getTriggerObject'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['email_id'] = isset($data['email_id']) ? $data['email_id'] : null;
        $this->container['lead_id'] = isset($data['lead_id']) ? $data['lead_id'] : null;
        $this->container['permutation_codes'] = isset($data['permutation_codes']) ? $data['permutation_codes'] : null;
        $this->container['text_only'] = isset($data['text_only']) ? $data['text_only'] : null;
        $this->container['trigger_object'] = isset($data['trigger_object']) ? $data['trigger_object'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['email_address'] === null) {
            $invalid_properties[] = "'email_address' can't be null";
        }
        if ($this->container['email_id'] === null) {
            $invalid_properties[] = "'email_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['email_address'] === null) {
            return false;
        }
        if ($this->container['email_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets email_address
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     * @param string $email_address Email address to send the sample to
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets email_id
     * @return int
     */
    public function getEmailId()
    {
        return $this->container['email_id'];
    }

    /**
     * Sets email_id
     * @param int $email_id Id of the email to send
     * @return $this
     */
    public function setEmailId($email_id)
    {
        $this->container['email_id'] = $email_id;

        return $this;
    }

    /**
     * Gets lead_id
     * @return string
     */
    public function getLeadId()
    {
        return $this->container['lead_id'];
    }

    /**
     * Sets lead_id
     * @param string $lead_id Id of a lead to impersonate.  Tokens and dynamic content will be populated as though it were sent to the lead
     * @return $this
     */
    public function setLeadId($lead_id)
    {
        $this->container['lead_id'] = $lead_id;

        return $this;
    }

    /**
     * Gets permutation_codes
     * @return string
     */
    public function getPermutationCodes()
    {
        return $this->container['permutation_codes'];
    }

    /**
     * Sets permutation_codes
     * @param string $permutation_codes
     * @return $this
     */
    public function setPermutationCodes($permutation_codes)
    {
        $this->container['permutation_codes'] = $permutation_codes;

        return $this;
    }

    /**
     * Gets text_only
     * @return bool
     */
    public function getTextOnly()
    {
        return $this->container['text_only'];
    }

    /**
     * Sets text_only
     * @param bool $text_only Whether to send to text only version along with the HTML version.  Default false
     * @return $this
     */
    public function setTextOnly($text_only)
    {
        $this->container['text_only'] = $text_only;

        return $this;
    }

    /**
     * Gets trigger_object
     * @return string
     */
    public function getTriggerObject()
    {
        return $this->container['trigger_object'];
    }

    /**
     * Sets trigger_object
     * @param string $trigger_object
     * @return $this
     */
    public function setTriggerObject($trigger_object)
    {
        $this->container['trigger_object'] = $trigger_object;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CollingMedia\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CollingMedia\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


