<?php
/**
 * LandingPageContentResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CollingMedia\Client\Model;

use \ArrayAccess;

/**
 * LandingPageContentResponse Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LandingPageContentResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LandingPageContentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'content' => 'object',
        'followup_type' => 'string',
        'followup_value' => 'string',
        'formatting_options' => '\CollingMedia\Client\Model\JsonNode',
        'id' => 'object',
        'index' => 'int',
        'type' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'content' => 'content',
        'followup_type' => 'followupType',
        'followup_value' => 'followupValue',
        'formatting_options' => 'formattingOptions',
        'id' => 'id',
        'index' => 'index',
        'type' => 'type'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'content' => 'setContent',
        'followup_type' => 'setFollowupType',
        'followup_value' => 'setFollowupValue',
        'formatting_options' => 'setFormattingOptions',
        'id' => 'setId',
        'index' => 'setIndex',
        'type' => 'setType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'content' => 'getContent',
        'followup_type' => 'getFollowupType',
        'followup_value' => 'getFollowupValue',
        'formatting_options' => 'getFormattingOptions',
        'id' => 'getId',
        'index' => 'getIndex',
        'type' => 'getType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const FOLLOWUP_TYPE_URL = 'url';
    const FOLLOWUP_TYPE_LP = 'lp';
    const FOLLOWUP_TYPE_FORM_DEFINED = 'formDefined';
    const TYPE_IMAGE = 'Image';
    const TYPE_SOCIAL_BUTTON = 'SocialButton';
    const TYPE_FORM = 'Form';
    const TYPE_DYNAMIC_CONTENT = 'DynamicContent';
    const TYPE_RECTANGLE = 'Rectangle';
    const TYPE_SNIPPET = 'Snippet';
    const TYPE_RICH_TEXT = 'RichText';
    const TYPE_HTML = 'HTML';
    const TYPE_VIDEO = 'Video';
    const TYPE_POLL = 'Poll';
    const TYPE_REFERRAL_OFFER = 'ReferralOffer';
    const TYPE_SWEEPSTAKES = 'Sweepstakes';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFollowupTypeAllowableValues()
    {
        return [
            self::FOLLOWUP_TYPE_URL,
            self::FOLLOWUP_TYPE_LP,
            self::FOLLOWUP_TYPE_FORM_DEFINED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_IMAGE,
            self::TYPE_SOCIAL_BUTTON,
            self::TYPE_FORM,
            self::TYPE_DYNAMIC_CONTENT,
            self::TYPE_RECTANGLE,
            self::TYPE_SNIPPET,
            self::TYPE_RICH_TEXT,
            self::TYPE_HTML,
            self::TYPE_VIDEO,
            self::TYPE_POLL,
            self::TYPE_REFERRAL_OFFER,
            self::TYPE_SWEEPSTAKES,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['followup_type'] = isset($data['followup_type']) ? $data['followup_type'] : null;
        $this->container['followup_value'] = isset($data['followup_value']) ? $data['followup_value'] : null;
        $this->container['formatting_options'] = isset($data['formatting_options']) ? $data['formatting_options'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["url", "lp", "formDefined"];
        if (!in_array($this->container['followup_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'followup_type', must be one of #{allowed_values}.";
        }

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = ["Image", "SocialButton", "Form", "DynamicContent", "Rectangle", "Snippet", "RichText", "HTML", "Video", "Poll", "ReferralOffer", "Sweepstakes"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["url", "lp", "formDefined"];
        if (!in_array($this->container['followup_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = ["Image", "SocialButton", "Form", "DynamicContent", "Rectangle", "Snippet", "RichText", "HTML", "Video", "Poll", "ReferralOffer", "Sweepstakes"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets content
     * @return object
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     * @param object $content Content of the section.  Expected values vary based on type.  Image: An image URL.  RichText: HTML Content.  HTML: HTML Content.  Form: A form id.  Rectangle: Empty. Snippet: A snippet id.
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets followup_type
     * @return string
     */
    public function getFollowupType()
    {
        return $this->container['followup_type'];
    }

    /**
     * Sets followup_type
     * @param string $followup_type Follow-up behavior of a form.  Only available for form-type content sections.  Defaults to form defined behavior.
     * @return $this
     */
    public function setFollowupType($followup_type)
    {
        $allowed_values = array('url', 'lp', 'formDefined');
        if (!is_null($followup_type) && (!in_array($followup_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'followup_type', must be one of 'url', 'lp', 'formDefined'");
        }
        $this->container['followup_type'] = $followup_type;

        return $this;
    }

    /**
     * Gets followup_value
     * @return string
     */
    public function getFollowupValue()
    {
        return $this->container['followup_value'];
    }

    /**
     * Sets followup_value
     * @param string $followup_value Where to follow-up on form submission.  When followupType is lp, accepts the integer id of a landing page.  For url, it accepts a url string.
     * @return $this
     */
    public function setFollowupValue($followup_value)
    {
        $this->container['followup_value'] = $followup_value;

        return $this;
    }

    /**
     * Gets formatting_options
     * @return \CollingMedia\Client\Model\JsonNode
     */
    public function getFormattingOptions()
    {
        return $this->container['formatting_options'];
    }

    /**
     * Sets formatting_options
     * @param \CollingMedia\Client\Model\JsonNode $formatting_options
     * @return $this
     */
    public function setFormattingOptions($formatting_options)
    {
        $this->container['formatting_options'] = $formatting_options;

        return $this;
    }

    /**
     * Gets id
     * @return object
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param object $id Id of the content section, may be a string or an int
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets index
     * @return int
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     * @param int $index Index of the content section.  Index orients the elements from lowest to highest
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Type of content section
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('Image', 'SocialButton', 'Form', 'DynamicContent', 'Rectangle', 'Snippet', 'RichText', 'HTML', 'Video', 'Poll', 'ReferralOffer', 'Sweepstakes');
        if ((!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'Image', 'SocialButton', 'Form', 'DynamicContent', 'Rectangle', 'Snippet', 'RichText', 'HTML', 'Video', 'Poll', 'ReferralOffer', 'Sweepstakes'");
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CollingMedia\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CollingMedia\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


