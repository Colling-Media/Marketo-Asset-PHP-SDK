<?php
/**
 * CreateLpTemplateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  CollingMedia\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CollingMedia\Client\Model;

use \ArrayAccess;

/**
 * CreateLpTemplateRequest Class Doc Comment
 *
 * @category    Class */
/**
 * @package     CollingMedia\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreateLpTemplateRequest implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CreateLpTemplateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => 'string',
        'enable_munchkin' => 'bool',
        'folder' => '\CollingMedia\Client\Model\Folder',
        'name' => 'string',
        'template_type' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'enable_munchkin' => 'enableMunchkin',
        'folder' => 'folder',
        'name' => 'name',
        'template_type' => 'templateType'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'enable_munchkin' => 'setEnableMunchkin',
        'folder' => 'setFolder',
        'name' => 'setName',
        'template_type' => 'setTemplateType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'enable_munchkin' => 'getEnableMunchkin',
        'folder' => 'getFolder',
        'name' => 'getName',
        'template_type' => 'getTemplateType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TEMPLATE_TYPE_GUIDED = 'guided';
    const TEMPLATE_TYPE_FREE_FORM = 'freeForm';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTemplateTypeAllowableValues()
    {
        return [
            self::TEMPLATE_TYPE_GUIDED,
            self::TEMPLATE_TYPE_FREE_FORM,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['enable_munchkin'] = isset($data['enable_munchkin']) ? $data['enable_munchkin'] : null;
        $this->container['folder'] = isset($data['folder']) ? $data['folder'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['template_type'] = isset($data['template_type']) ? $data['template_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['folder'] === null) {
            $invalid_properties[] = "'folder' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        $allowed_values = ["guided", "freeForm"];
        if (!in_array($this->container['template_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'template_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['folder'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        $allowed_values = ["guided", "freeForm"];
        if (!in_array($this->container['template_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Description of the landing page template
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enable_munchkin
     * @return bool
     */
    public function getEnableMunchkin()
    {
        return $this->container['enable_munchkin'];
    }

    /**
     * Sets enable_munchkin
     * @param bool $enable_munchkin Whether to enable munchkin on the derived pages.  Defaults to true
     * @return $this
     */
    public function setEnableMunchkin($enable_munchkin)
    {
        $this->container['enable_munchkin'] = $enable_munchkin;

        return $this;
    }

    /**
     * Gets folder
     * @return \CollingMedia\Client\Model\Folder
     */
    public function getFolder()
    {
        return $this->container['folder'];
    }

    /**
     * Sets folder
     * @param \CollingMedia\Client\Model\Folder $folder JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'
     * @return $this
     */
    public function setFolder($folder)
    {
        $this->container['folder'] = $folder;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name of the landing page template
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets template_type
     * @return string
     */
    public function getTemplateType()
    {
        return $this->container['template_type'];
    }

    /**
     * Sets template_type
     * @param string $template_type Type of template to create.  Defaults to freeForm
     * @return $this
     */
    public function setTemplateType($template_type)
    {
        $allowed_values = array('guided', 'freeForm');
        if (!is_null($template_type) && (!in_array($template_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'template_type', must be one of 'guided', 'freeForm'");
        }
        $this->container['template_type'] = $template_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CollingMedia\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CollingMedia\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


