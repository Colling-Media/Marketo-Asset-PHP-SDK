<?php
/**
 * VisibilityRuleRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CollingMedia\Client\Model;

use \ArrayAccess;

/**
 * VisibilityRuleRequest Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VisibilityRuleRequest implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'VisibilityRuleRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alt_label' => 'string',
        'operator' => 'string',
        'pick_list_values' => '\CollingMedia\Client\Model\PickListDTO[]',
        'subject_field' => 'string',
        'values' => 'string[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'alt_label' => 'altLabel',
        'operator' => 'operator',
        'pick_list_values' => 'pickListValues',
        'subject_field' => 'subjectField',
        'values' => 'values'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'alt_label' => 'setAltLabel',
        'operator' => 'setOperator',
        'pick_list_values' => 'setPickListValues',
        'subject_field' => 'setSubjectField',
        'values' => 'setValues'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'alt_label' => 'getAltLabel',
        'operator' => 'getOperator',
        'pick_list_values' => 'getPickListValues',
        'subject_field' => 'getSubjectField',
        'values' => 'getValues'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const OPERATOR_EQ = 'eq';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getOperatorAllowableValues()
    {
        return [
            self::OPERATOR_EQ,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alt_label'] = isset($data['alt_label']) ? $data['alt_label'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['pick_list_values'] = isset($data['pick_list_values']) ? $data['pick_list_values'] : null;
        $this->container['subject_field'] = isset($data['subject_field']) ? $data['subject_field'] : null;
        $this->container['values'] = isset($data['values']) ? $data['values'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['operator'] === null) {
            $invalid_properties[] = "'operator' can't be null";
        }
        $allowed_values = ["eq"];
        if (!in_array($this->container['operator'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'operator', must be one of #{allowed_values}.";
        }

        if ($this->container['subject_field'] === null) {
            $invalid_properties[] = "'subject_field' can't be null";
        }
        if ($this->container['values'] === null) {
            $invalid_properties[] = "'values' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['operator'] === null) {
            return false;
        }
        $allowed_values = ["eq"];
        if (!in_array($this->container['operator'], $allowed_values)) {
            return false;
        }
        if ($this->container['subject_field'] === null) {
            return false;
        }
        if ($this->container['values'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets alt_label
     * @return string
     */
    public function getAltLabel()
    {
        return $this->container['alt_label'];
    }

    /**
     * Sets alt_label
     * @param string $alt_label
     * @return $this
     */
    public function setAltLabel($alt_label)
    {
        $this->container['alt_label'] = $alt_label;

        return $this;
    }

    /**
     * Gets operator
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     * @param string $operator Operation to apply to target field.  Evaluated against the list of values when applicable.
     * @return $this
     */
    public function setOperator($operator)
    {
        $allowed_values = array('eq');
        if ((!in_array($operator, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'operator', must be one of 'eq'");
        }
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets pick_list_values
     * @return \CollingMedia\Client\Model\PickListDTO[]
     */
    public function getPickListValues()
    {
        return $this->container['pick_list_values'];
    }

    /**
     * Sets pick_list_values
     * @param \CollingMedia\Client\Model\PickListDTO[] $pick_list_values Alternative label to display when rules are applied.
     * @return $this
     */
    public function setPickListValues($pick_list_values)
    {
        $this->container['pick_list_values'] = $pick_list_values;

        return $this;
    }

    /**
     * Gets subject_field
     * @return string
     */
    public function getSubjectField()
    {
        return $this->container['subject_field'];
    }

    /**
     * Sets subject_field
     * @param string $subject_field Target field id to apply the operation defined by operator to
     * @return $this
     */
    public function setSubjectField($subject_field)
    {
        $this->container['subject_field'] = $subject_field;

        return $this;
    }

    /**
     * Gets values
     * @return string[]
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     * @param string[] $values Comma-separated list of values to match against.  Valid for operators 'equal', 'notEqual', 'startsWith', 'notStartsWith', 'endsWith', 'notEndsWith', 'contains', and 'notContains'
     * @return $this
     */
    public function setValues($values)
    {
        $this->container['values'] = $values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CollingMedia\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CollingMedia\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


