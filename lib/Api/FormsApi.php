<?php
/**
 * FormsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CollingMedia\Client\Api;

use \CollingMedia\Client\ApiClient;
use \CollingMedia\Client\ApiException;
use \CollingMedia\Client\Configuration;
use \CollingMedia\Client\ObjectSerializer;

/**
 * FormsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FormsApi
{
    /**
     * API Client
     *
     * @var \CollingMedia\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \CollingMedia\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\CollingMedia\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \CollingMedia\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \CollingMedia\Client\ApiClient $apiClient set the API client
     *
     * @return FormsApi
     */
    public function setApiClient(\CollingMedia\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation approveFromUsingPOST
     *
     * Approve Form Draft
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfLpFormResponse
     */
    public function approveFromUsingPOST($id)
    {
        list($response) = $this->approveFromUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation approveFromUsingPOSTWithHttpInfo
     *
     * Approve Form Draft
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfLpFormResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function approveFromUsingPOSTWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling approveFromUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/form/{id}/approveDraft.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfLpFormResponse',
                '/rest/asset/v1/form/{id}/approveDraft.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfLpFormResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfLpFormResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation browseForms2UsingGET
     *
     * Get Forms
     *
     * @param string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @param string $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param string $offset Integer offset for paging (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfLpFormResponse
     */
    public function browseForms2UsingGET($folder, $status = null, $max_return = null, $offset = null)
    {
        list($response) = $this->browseForms2UsingGETWithHttpInfo($folder, $status, $max_return, $offset);
        return $response;
    }

    /**
     * Operation browseForms2UsingGETWithHttpInfo
     *
     * Get Forms
     *
     * @param string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @param string $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param string $offset Integer offset for paging (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfLpFormResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function browseForms2UsingGETWithHttpInfo($folder, $status = null, $max_return = null, $offset = null)
    {
        // verify the required parameter 'folder' is set
        if ($folder === null) {
            throw new \InvalidArgumentException('Missing the required parameter $folder when calling browseForms2UsingGET');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/forms.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // query params
        if ($max_return !== null) {
            $queryParams['maxReturn'] = $this->apiClient->getSerializer()->toQueryValue($max_return);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfLpFormResponse',
                '/rest/asset/v1/forms.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfLpFormResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfLpFormResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloneLpFormsUsingPOST
     *
     * Clone Form
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\CloneLpFormRequest $clone_form_request cloneFormRequest (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfLpFormResponse
     */
    public function cloneLpFormsUsingPOST($id, $clone_form_request = null)
    {
        list($response) = $this->cloneLpFormsUsingPOSTWithHttpInfo($id, $clone_form_request);
        return $response;
    }

    /**
     * Operation cloneLpFormsUsingPOSTWithHttpInfo
     *
     * Clone Form
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\CloneLpFormRequest $clone_form_request cloneFormRequest (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfLpFormResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloneLpFormsUsingPOSTWithHttpInfo($id, $clone_form_request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling cloneLpFormsUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/form/{id}/clone.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($clone_form_request)) {
            $_tempBody = $clone_form_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfLpFormResponse',
                '/rest/asset/v1/form/{id}/clone.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfLpFormResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfLpFormResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLpFormsUsingPOST
     *
     * Create Form
     *
     * @param \CollingMedia\Client\Model\CreateLpFormRequest $create_form_request createFormRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfLpFormResponse
     */
    public function createLpFormsUsingPOST($create_form_request)
    {
        list($response) = $this->createLpFormsUsingPOSTWithHttpInfo($create_form_request);
        return $response;
    }

    /**
     * Operation createLpFormsUsingPOSTWithHttpInfo
     *
     * Create Form
     *
     * @param \CollingMedia\Client\Model\CreateLpFormRequest $create_form_request createFormRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfLpFormResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLpFormsUsingPOSTWithHttpInfo($create_form_request)
    {
        // verify the required parameter 'create_form_request' is set
        if ($create_form_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $create_form_request when calling createLpFormsUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/forms.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($create_form_request)) {
            $_tempBody = $create_form_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfLpFormResponse',
                '/rest/asset/v1/forms.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfLpFormResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfLpFormResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteFormByIdUsingPOST
     *
     * Delete Form
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfIdResponse
     */
    public function deleteFormByIdUsingPOST($id)
    {
        list($response) = $this->deleteFormByIdUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteFormByIdUsingPOSTWithHttpInfo
     *
     * Delete Form
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFormByIdUsingPOSTWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteFormByIdUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/form/{id}/delete.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfIdResponse',
                '/rest/asset/v1/form/{id}/delete.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfIdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfIdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation discardFormByIdUsingPOST
     *
     * Discard Form Draft
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfIdResponse
     */
    public function discardFormByIdUsingPOST($id)
    {
        list($response) = $this->discardFormByIdUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation discardFormByIdUsingPOSTWithHttpInfo
     *
     * Discard Form Draft
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function discardFormByIdUsingPOSTWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling discardFormByIdUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/form/{id}/discardDraft.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfIdResponse',
                '/rest/asset/v1/form/{id}/discardDraft.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfIdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfIdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLpFormByIdUsingGET
     *
     * Get Form By Id
     *
     * @param int $id id (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfLpFormResponse
     */
    public function getLpFormByIdUsingGET($id, $status = null)
    {
        list($response) = $this->getLpFormByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Operation getLpFormByIdUsingGETWithHttpInfo
     *
     * Get Form By Id
     *
     * @param int $id id (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfLpFormResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLpFormByIdUsingGETWithHttpInfo($id, $status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getLpFormByIdUsingGET');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/form/{id}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfLpFormResponse',
                '/rest/asset/v1/form/{id}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfLpFormResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfLpFormResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLpFormByNameUsingGET
     *
     * Get Form by Name
     *
     * @param string $name Name of the form (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @param string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfLpFormResponse
     */
    public function getLpFormByNameUsingGET($name, $status = null, $folder = null)
    {
        list($response) = $this->getLpFormByNameUsingGETWithHttpInfo($name, $status, $folder);
        return $response;
    }

    /**
     * Operation getLpFormByNameUsingGETWithHttpInfo
     *
     * Get Form by Name
     *
     * @param string $name Name of the form (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @param string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfLpFormResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLpFormByNameUsingGETWithHttpInfo($name, $status = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getLpFormByNameUsingGET');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/form/byName.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfLpFormResponse',
                '/rest/asset/v1/form/byName.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfLpFormResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfLpFormResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getThankYouPageByIdUsingGET
     *
     * Get Thank You Page by Form Id
     *
     * @param int $id id (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfThankYouPageResponse
     */
    public function getThankYouPageByIdUsingGET($id, $status = null)
    {
        list($response) = $this->getThankYouPageByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Operation getThankYouPageByIdUsingGETWithHttpInfo
     *
     * Get Thank You Page by Form Id
     *
     * @param int $id id (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfThankYouPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getThankYouPageByIdUsingGETWithHttpInfo($id, $status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getThankYouPageByIdUsingGET');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/form/{id}/thankYouPage.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfThankYouPageResponse',
                '/rest/asset/v1/form/{id}/thankYouPage.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfThankYouPageResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfThankYouPageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateFormSubmitButtonUsingPOST
     *
     * Update Submit Button
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\SubmitButtonRequest $submit_button_request submitButtonRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfLpFormResponse
     */
    public function updateFormSubmitButtonUsingPOST($id, $submit_button_request)
    {
        list($response) = $this->updateFormSubmitButtonUsingPOSTWithHttpInfo($id, $submit_button_request);
        return $response;
    }

    /**
     * Operation updateFormSubmitButtonUsingPOSTWithHttpInfo
     *
     * Update Submit Button
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\SubmitButtonRequest $submit_button_request submitButtonRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfLpFormResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFormSubmitButtonUsingPOSTWithHttpInfo($id, $submit_button_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateFormSubmitButtonUsingPOST');
        }
        // verify the required parameter 'submit_button_request' is set
        if ($submit_button_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $submit_button_request when calling updateFormSubmitButtonUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/form/{id}/submitButton.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($submit_button_request)) {
            $_tempBody = $submit_button_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfLpFormResponse',
                '/rest/asset/v1/form/{id}/submitButton.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfLpFormResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfLpFormResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateFormsUsingPOST
     *
     * Update Form Metadata
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\UpdateFormMetaDataRequest $update_form_meta_data_request updateFormMetaDataRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfLpFormResponse
     */
    public function updateFormsUsingPOST($id, $update_form_meta_data_request)
    {
        list($response) = $this->updateFormsUsingPOSTWithHttpInfo($id, $update_form_meta_data_request);
        return $response;
    }

    /**
     * Operation updateFormsUsingPOSTWithHttpInfo
     *
     * Update Form Metadata
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\UpdateFormMetaDataRequest $update_form_meta_data_request updateFormMetaDataRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfLpFormResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFormsUsingPOSTWithHttpInfo($id, $update_form_meta_data_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateFormsUsingPOST');
        }
        // verify the required parameter 'update_form_meta_data_request' is set
        if ($update_form_meta_data_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update_form_meta_data_request when calling updateFormsUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/form/{id}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($update_form_meta_data_request)) {
            $_tempBody = $update_form_meta_data_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfLpFormResponse',
                '/rest/asset/v1/form/{id}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfLpFormResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfLpFormResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateThankYouPageByIdUsingPOST
     *
     * Update Thank You Page
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\UpdateThankYouPageRequest $thank_you_page_request thankYouPageRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfThankYouPageResponse
     */
    public function updateThankYouPageByIdUsingPOST($id, $thank_you_page_request)
    {
        list($response) = $this->updateThankYouPageByIdUsingPOSTWithHttpInfo($id, $thank_you_page_request);
        return $response;
    }

    /**
     * Operation updateThankYouPageByIdUsingPOSTWithHttpInfo
     *
     * Update Thank You Page
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\UpdateThankYouPageRequest $thank_you_page_request thankYouPageRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfThankYouPageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateThankYouPageByIdUsingPOSTWithHttpInfo($id, $thank_you_page_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateThankYouPageByIdUsingPOST');
        }
        // verify the required parameter 'thank_you_page_request' is set
        if ($thank_you_page_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $thank_you_page_request when calling updateThankYouPageByIdUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/form/{id}/thankYouPage.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($thank_you_page_request)) {
            $_tempBody = $thank_you_page_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfThankYouPageResponse',
                '/rest/asset/v1/form/{id}/thankYouPage.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfThankYouPageResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfThankYouPageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
