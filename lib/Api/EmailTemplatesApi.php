<?php
/**
 * EmailTemplatesApi
 * PHP version 5
 *
 * @category Class
 * @package  CollingMedia\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CollingMedia\Client\Api;

use \CollingMedia\Client\ApiClient;
use \CollingMedia\Client\ApiException;
use \CollingMedia\Client\Configuration;
use \CollingMedia\Client\ObjectSerializer;

/**
 * EmailTemplatesApi Class Doc Comment
 *
 * @category Class
 * @package  CollingMedia\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailTemplatesApi
{
    /**
     * API Client
     *
     * @var \CollingMedia\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \CollingMedia\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\CollingMedia\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \CollingMedia\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \CollingMedia\Client\ApiClient $apiClient set the API client
     *
     * @return EmailTemplatesApi
     */
    public function setApiClient(\CollingMedia\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation approveDraftUsingPOST1
     *
     * Approve Email Template Draft
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfEmailTemplateResponse
     */
    public function approveDraftUsingPOST1($id)
    {
        list($response) = $this->approveDraftUsingPOST1WithHttpInfo($id);
        return $response;
    }

    /**
     * Operation approveDraftUsingPOST1WithHttpInfo
     *
     * Approve Email Template Draft
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfEmailTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function approveDraftUsingPOST1WithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling approveDraftUsingPOST1');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/emailTemplate/{id}/approveDraft.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse',
                '/rest/asset/v1/emailTemplate/{id}/approveDraft.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloneTemplateUsingPOST
     *
     * Clone Email Template
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\CloneEmailTemplateRequest $clone_email_template_request cloneEmailTemplateRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfEmailTemplateResponse
     */
    public function cloneTemplateUsingPOST($id, $clone_email_template_request)
    {
        list($response) = $this->cloneTemplateUsingPOSTWithHttpInfo($id, $clone_email_template_request);
        return $response;
    }

    /**
     * Operation cloneTemplateUsingPOSTWithHttpInfo
     *
     * Clone Email Template
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\CloneEmailTemplateRequest $clone_email_template_request cloneEmailTemplateRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfEmailTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloneTemplateUsingPOSTWithHttpInfo($id, $clone_email_template_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling cloneTemplateUsingPOST');
        }
        // verify the required parameter 'clone_email_template_request' is set
        if ($clone_email_template_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clone_email_template_request when calling cloneTemplateUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/emailTemplate/{id}/clone.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($clone_email_template_request)) {
            $_tempBody = $clone_email_template_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse',
                '/rest/asset/v1/emailTemplate/{id}/clone.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createEmailTemplateUsingPOST
     *
     * Create Email Template
     *
     * @param string $name Name of the email template (required)
     * @param string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (required)
     * @param string $content HTML content of the template (required)
     * @param string $description Description of the asset (optional)
     * @param string $workspace Name of the workspace (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfEmailTemplateResponse
     */
    public function createEmailTemplateUsingPOST($name, $folder, $content, $description = null, $workspace = null)
    {
        list($response) = $this->createEmailTemplateUsingPOSTWithHttpInfo($name, $folder, $content, $description, $workspace);
        return $response;
    }

    /**
     * Operation createEmailTemplateUsingPOSTWithHttpInfo
     *
     * Create Email Template
     *
     * @param string $name Name of the email template (required)
     * @param string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (required)
     * @param string $content HTML content of the template (required)
     * @param string $description Description of the asset (optional)
     * @param string $workspace Name of the workspace (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfEmailTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEmailTemplateUsingPOSTWithHttpInfo($name, $folder, $content, $description = null, $workspace = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createEmailTemplateUsingPOST');
        }
        // verify the required parameter 'folder' is set
        if ($folder === null) {
            throw new \InvalidArgumentException('Missing the required parameter $folder when calling createEmailTemplateUsingPOST');
        }
        // verify the required parameter 'content' is set
        if ($content === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content when calling createEmailTemplateUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/emailTemplates.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($name)) {
            $_tempBody = $name;
        }
// body params
        $_tempBody = null;
        if (isset($description)) {
            $_tempBody = $description;
        }
// body params
        $_tempBody = null;
        if (isset($folder)) {
            $_tempBody = $folder;
        }
// body params
        $_tempBody = null;
        if (isset($workspace)) {
            $_tempBody = $workspace;
        }
// body params
        $_tempBody = null;
        if (isset($content)) {
            $_tempBody = $content;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse',
                '/rest/asset/v1/emailTemplates.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTemplateUsingPOST
     *
     * Delete Email Template
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfIdResponse
     */
    public function deleteTemplateUsingPOST($id)
    {
        list($response) = $this->deleteTemplateUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteTemplateUsingPOSTWithHttpInfo
     *
     * Delete Email Template
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTemplateUsingPOSTWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteTemplateUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/emailTemplate/{id}/delete.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfIdResponse',
                '/rest/asset/v1/emailTemplate/{id}/delete.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfIdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfIdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation discardDraftUsingPOST1
     *
     * Discard Email Template Draft
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfIdResponse
     */
    public function discardDraftUsingPOST1($id)
    {
        list($response) = $this->discardDraftUsingPOST1WithHttpInfo($id);
        return $response;
    }

    /**
     * Operation discardDraftUsingPOST1WithHttpInfo
     *
     * Discard Email Template Draft
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function discardDraftUsingPOST1WithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling discardDraftUsingPOST1');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/emailTemplate/{id}/discardDraft.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfIdResponse',
                '/rest/asset/v1/emailTemplate/{id}/discardDraft.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfIdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfIdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEmailTemplatesUsingGET
     *
     * Get Email Templates
     *
     * @param \CollingMedia\Client\Model\EmailTemplateRequest $email_template_request emailTemplateRequest (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @param string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfEmailTemplateResponse
     */
    public function getEmailTemplatesUsingGET($email_template_request, $status = null, $folder = null)
    {
        list($response) = $this->getEmailTemplatesUsingGETWithHttpInfo($email_template_request, $status, $folder);
        return $response;
    }

    /**
     * Operation getEmailTemplatesUsingGETWithHttpInfo
     *
     * Get Email Templates
     *
     * @param \CollingMedia\Client\Model\EmailTemplateRequest $email_template_request emailTemplateRequest (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @param string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfEmailTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailTemplatesUsingGETWithHttpInfo($email_template_request, $status = null, $folder = null)
    {
        // verify the required parameter 'email_template_request' is set
        if ($email_template_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $email_template_request when calling getEmailTemplatesUsingGET');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/emailTemplates.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($email_template_request)) {
            $_tempBody = $email_template_request;
        }
// body params
        $_tempBody = null;
        if (isset($folder)) {
            $_tempBody = $folder;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse',
                '/rest/asset/v1/emailTemplates.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTemplateByIdUsingGET
     *
     * Get Email Template by Id
     *
     * @param int $id id (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfEmailTemplateResponse
     */
    public function getTemplateByIdUsingGET($id, $status = null)
    {
        list($response) = $this->getTemplateByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Operation getTemplateByIdUsingGETWithHttpInfo
     *
     * Get Email Template by Id
     *
     * @param int $id id (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfEmailTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTemplateByIdUsingGETWithHttpInfo($id, $status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getTemplateByIdUsingGET');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/emailTemplate/{id}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse',
                '/rest/asset/v1/emailTemplate/{id}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTemplateByNameUsingGET
     *
     * Get Email Template by Name
     *
     * @param string $name name (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfEmailTemplateResponse
     */
    public function getTemplateByNameUsingGET($name, $status = null)
    {
        list($response) = $this->getTemplateByNameUsingGETWithHttpInfo($name, $status);
        return $response;
    }

    /**
     * Operation getTemplateByNameUsingGETWithHttpInfo
     *
     * Get Email Template by Name
     *
     * @param string $name name (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfEmailTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTemplateByNameUsingGETWithHttpInfo($name, $status = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getTemplateByNameUsingGET');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/emailTemplate/byName.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse',
                '/rest/asset/v1/emailTemplate/byName.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTemplateContentByIdUsingGET
     *
     * Get Email Template Content by Id
     *
     * @param int $id id (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfEmailTemplateContentResponse
     */
    public function getTemplateContentByIdUsingGET($id, $status = null)
    {
        list($response) = $this->getTemplateContentByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Operation getTemplateContentByIdUsingGETWithHttpInfo
     *
     * Get Email Template Content by Id
     *
     * @param int $id id (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfEmailTemplateContentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTemplateContentByIdUsingGETWithHttpInfo($id, $status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getTemplateContentByIdUsingGET');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/emailTemplate/{id}/content";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfEmailTemplateContentResponse',
                '/rest/asset/v1/emailTemplate/{id}/content'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfEmailTemplateContentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfEmailTemplateContentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation unapproveDraftUsingPOST1
     *
     * Unapprove Email Template Draft
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfEmailTemplateResponse
     */
    public function unapproveDraftUsingPOST1($id)
    {
        list($response) = $this->unapproveDraftUsingPOST1WithHttpInfo($id);
        return $response;
    }

    /**
     * Operation unapproveDraftUsingPOST1WithHttpInfo
     *
     * Unapprove Email Template Draft
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfEmailTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function unapproveDraftUsingPOST1WithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling unapproveDraftUsingPOST1');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/emailTemplate/{id}/unapprove.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse',
                '/rest/asset/v1/emailTemplate/{id}/unapprove.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateEmailTemplateContentUsingPOST
     *
     * Update Email Template Content
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\UpdateEmailTemplateContentRequest $update_email_template_content_request updateEmailTemplateContentRequest (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfIdResponse
     */
    public function updateEmailTemplateContentUsingPOST($id, $update_email_template_content_request = null)
    {
        list($response) = $this->updateEmailTemplateContentUsingPOSTWithHttpInfo($id, $update_email_template_content_request);
        return $response;
    }

    /**
     * Operation updateEmailTemplateContentUsingPOSTWithHttpInfo
     *
     * Update Email Template Content
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\UpdateEmailTemplateContentRequest $update_email_template_content_request updateEmailTemplateContentRequest (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailTemplateContentUsingPOSTWithHttpInfo($id, $update_email_template_content_request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateEmailTemplateContentUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/emailTemplate/{id}/content.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($update_email_template_content_request)) {
            $_tempBody = $update_email_template_content_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfIdResponse',
                '/rest/asset/v1/emailTemplate/{id}/content.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfIdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfIdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateEmailTemplateUsingPOST
     *
     * Update Email Template Metadata
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\UpdateEmailTemplateMetaDataRequest $update_email_meta_data_request updateEmailMetaDataRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfEmailTemplateResponse
     */
    public function updateEmailTemplateUsingPOST($id, $update_email_meta_data_request)
    {
        list($response) = $this->updateEmailTemplateUsingPOSTWithHttpInfo($id, $update_email_meta_data_request);
        return $response;
    }

    /**
     * Operation updateEmailTemplateUsingPOSTWithHttpInfo
     *
     * Update Email Template Metadata
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\UpdateEmailTemplateMetaDataRequest $update_email_meta_data_request updateEmailMetaDataRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfEmailTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailTemplateUsingPOSTWithHttpInfo($id, $update_email_meta_data_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateEmailTemplateUsingPOST');
        }
        // verify the required parameter 'update_email_meta_data_request' is set
        if ($update_email_meta_data_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update_email_meta_data_request when calling updateEmailTemplateUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/emailTemplate/{id}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($update_email_meta_data_request)) {
            $_tempBody = $update_email_meta_data_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse',
                '/rest/asset/v1/emailTemplate/{id}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfEmailTemplateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
