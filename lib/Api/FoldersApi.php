<?php
/**
 * FoldersApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CollingMedia\Client\Api;

use \CollingMedia\Client\ApiClient;
use \CollingMedia\Client\ApiException;
use \CollingMedia\Client\Configuration;
use \CollingMedia\Client\ObjectSerializer;

/**
 * FoldersApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FoldersApi
{
    /**
     * API Client
     *
     * @var \CollingMedia\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \CollingMedia\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\CollingMedia\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \CollingMedia\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \CollingMedia\Client\ApiClient $apiClient set the API client
     *
     * @return FoldersApi
     */
    public function setApiClient(\CollingMedia\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createFolderUsingPOST
     *
     * Create Folder
     *
     * @param \CollingMedia\Client\Model\CreateFolderRequest $create_folder_request createFolderRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfFolderResponse
     */
    public function createFolderUsingPOST($create_folder_request)
    {
        list($response) = $this->createFolderUsingPOSTWithHttpInfo($create_folder_request);
        return $response;
    }

    /**
     * Operation createFolderUsingPOSTWithHttpInfo
     *
     * Create Folder
     *
     * @param \CollingMedia\Client\Model\CreateFolderRequest $create_folder_request createFolderRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFolderUsingPOSTWithHttpInfo($create_folder_request)
    {
        // verify the required parameter 'create_folder_request' is set
        if ($create_folder_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $create_folder_request when calling createFolderUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/folders.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($create_folder_request)) {
            $_tempBody = $create_folder_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfFolderResponse',
                '/rest/asset/v1/folders.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfFolderResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfFolderResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteFolderUsingPOST
     *
     * Delete Folder
     *
     * @param int $id id (required)
     * @param string $type type (optional, default to Folder)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfIdResponse
     */
    public function deleteFolderUsingPOST($id, $type = null)
    {
        list($response) = $this->deleteFolderUsingPOSTWithHttpInfo($id, $type);
        return $response;
    }

    /**
     * Operation deleteFolderUsingPOSTWithHttpInfo
     *
     * Delete Folder
     *
     * @param int $id id (required)
     * @param string $type type (optional, default to Folder)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFolderUsingPOSTWithHttpInfo($id, $type = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteFolderUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/folder/{id}/delete.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($type !== null) {
            $formParams['type'] = $this->apiClient->getSerializer()->toFormValue($type);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfIdResponse',
                '/rest/asset/v1/folder/{id}/delete.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfIdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfIdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFolderByIdUsingGET
     *
     * Get Folder by Id
     *
     * @param int $id id (required)
     * @param string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39; (optional, default to Folder)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfFolderResponse
     */
    public function getFolderByIdUsingGET($id, $type = null)
    {
        list($response) = $this->getFolderByIdUsingGETWithHttpInfo($id, $type);
        return $response;
    }

    /**
     * Operation getFolderByIdUsingGETWithHttpInfo
     *
     * Get Folder by Id
     *
     * @param int $id id (required)
     * @param string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39; (optional, default to Folder)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFolderByIdUsingGETWithHttpInfo($id, $type = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getFolderByIdUsingGET');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/folder/{id}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfFolderResponse',
                '/rest/asset/v1/folder/{id}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfFolderResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfFolderResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFolderByNameUsingGET
     *
     * Get Folder by Name
     *
     * @param string $name Name of the folder.  Not applicable for Programs (optional)
     * @param string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @param string $root Parent folder reference (optional)
     * @param string $work_space Name of the workspace (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfFolderResponse
     */
    public function getFolderByNameUsingGET($name = null, $type = null, $root = null, $work_space = null)
    {
        list($response) = $this->getFolderByNameUsingGETWithHttpInfo($name, $type, $root, $work_space);
        return $response;
    }

    /**
     * Operation getFolderByNameUsingGETWithHttpInfo
     *
     * Get Folder by Name
     *
     * @param string $name Name of the folder.  Not applicable for Programs (optional)
     * @param string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @param string $root Parent folder reference (optional)
     * @param string $work_space Name of the workspace (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFolderByNameUsingGETWithHttpInfo($name = null, $type = null, $root = null, $work_space = null)
    {
        // parse inputs
        $resourcePath = "/rest/asset/v1/folder/byName.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($root !== null) {
            $queryParams['root'] = $this->apiClient->getSerializer()->toQueryValue($root);
        }
        // query params
        if ($work_space !== null) {
            $queryParams['workSpace'] = $this->apiClient->getSerializer()->toQueryValue($work_space);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfFolderResponse',
                '/rest/asset/v1/folder/byName.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfFolderResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfFolderResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFolderContentUsingGET
     *
     * Get Folder Contents
     *
     * @param int $id id (required)
     * @param int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param int $off_set Integer offset for paging (optional)
     * @param string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfFolderContentResponse
     */
    public function getFolderContentUsingGET($id, $max_return = null, $off_set = null, $type = null)
    {
        list($response) = $this->getFolderContentUsingGETWithHttpInfo($id, $max_return, $off_set, $type);
        return $response;
    }

    /**
     * Operation getFolderContentUsingGETWithHttpInfo
     *
     * Get Folder Contents
     *
     * @param int $id id (required)
     * @param int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param int $off_set Integer offset for paging (optional)
     * @param string $type Type of folder.  &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfFolderContentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFolderContentUsingGETWithHttpInfo($id, $max_return = null, $off_set = null, $type = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getFolderContentUsingGET');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/folder/{id}/content.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($max_return !== null) {
            $queryParams['maxReturn'] = $this->apiClient->getSerializer()->toQueryValue($max_return);
        }
        // query params
        if ($off_set !== null) {
            $queryParams['offSet'] = $this->apiClient->getSerializer()->toQueryValue($off_set);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfFolderContentResponse',
                '/rest/asset/v1/folder/{id}/content.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfFolderContentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfFolderContentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFolderUsingGET
     *
     * Get Folders
     *
     * @param string $root Parent folder reference (optional)
     * @param int $max_depth Maximum folder depth to traverse, Default 2 (optional)
     * @param string $work_space Name of the workspace (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfFolderResponse
     */
    public function getFolderUsingGET($root = null, $max_depth = null, $work_space = null)
    {
        list($response) = $this->getFolderUsingGETWithHttpInfo($root, $max_depth, $work_space);
        return $response;
    }

    /**
     * Operation getFolderUsingGETWithHttpInfo
     *
     * Get Folders
     *
     * @param string $root Parent folder reference (optional)
     * @param int $max_depth Maximum folder depth to traverse, Default 2 (optional)
     * @param string $work_space Name of the workspace (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFolderUsingGETWithHttpInfo($root = null, $max_depth = null, $work_space = null)
    {
        // parse inputs
        $resourcePath = "/rest/asset/v1/folders.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($root !== null) {
            $queryParams['root'] = $this->apiClient->getSerializer()->toQueryValue($root);
        }
        // query params
        if ($max_depth !== null) {
            $queryParams['maxDepth'] = $this->apiClient->getSerializer()->toQueryValue($max_depth);
        }
        // query params
        if ($work_space !== null) {
            $queryParams['workSpace'] = $this->apiClient->getSerializer()->toQueryValue($work_space);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfFolderResponse',
                '/rest/asset/v1/folders.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfFolderResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfFolderResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateFolderUsingPOST
     *
     * Update Folder Metadata
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\UpdateFolderRequest $update_folder_request updateFolderRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfFolderResponse
     */
    public function updateFolderUsingPOST($id, $update_folder_request)
    {
        list($response) = $this->updateFolderUsingPOSTWithHttpInfo($id, $update_folder_request);
        return $response;
    }

    /**
     * Operation updateFolderUsingPOSTWithHttpInfo
     *
     * Update Folder Metadata
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\UpdateFolderRequest $update_folder_request updateFolderRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFolderUsingPOSTWithHttpInfo($id, $update_folder_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateFolderUsingPOST');
        }
        // verify the required parameter 'update_folder_request' is set
        if ($update_folder_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update_folder_request when calling updateFolderUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/folder/{id}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($update_folder_request)) {
            $_tempBody = $update_folder_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfFolderResponse',
                '/rest/asset/v1/folder/{id}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfFolderResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfFolderResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
