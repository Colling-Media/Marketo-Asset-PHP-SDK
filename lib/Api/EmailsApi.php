<?php
/**
 * EmailsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CollingMedia\Client\Api;

use \CollingMedia\Client\ApiClient;
use \CollingMedia\Client\ApiException;
use \CollingMedia\Client\Configuration;
use \CollingMedia\Client\ObjectSerializer;

/**
 * EmailsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailsApi
{
    /**
     * API Client
     *
     * @var \CollingMedia\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \CollingMedia\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\CollingMedia\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \CollingMedia\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \CollingMedia\Client\ApiClient $apiClient set the API client
     *
     * @return EmailsApi
     */
    public function setApiClient(\CollingMedia\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addModuleUsingPOST
     *
     * Add Email Module
     *
     * @param int $id id (required)
     * @param string $module_id moduleId (required)
     * @param string $name Name of the module (required)
     * @param int $index Index of the module.  Determines the order of the module in the email. (required)
     * @param \CollingMedia\Client\Model\AddModuleRequest $add_module_request addModuleRequest (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ModelResponse
     */
    public function addModuleUsingPOST($id, $module_id, $name, $index, $add_module_request = null)
    {
        list($response) = $this->addModuleUsingPOSTWithHttpInfo($id, $module_id, $name, $index, $add_module_request);
        return $response;
    }

    /**
     * Operation addModuleUsingPOSTWithHttpInfo
     *
     * Add Email Module
     *
     * @param int $id id (required)
     * @param string $module_id moduleId (required)
     * @param string $name Name of the module (required)
     * @param int $index Index of the module.  Determines the order of the module in the email. (required)
     * @param \CollingMedia\Client\Model\AddModuleRequest $add_module_request addModuleRequest (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ModelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addModuleUsingPOSTWithHttpInfo($id, $module_id, $name, $index, $add_module_request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addModuleUsingPOST');
        }
        // verify the required parameter 'module_id' is set
        if ($module_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $module_id when calling addModuleUsingPOST');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling addModuleUsingPOST');
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException('Missing the required parameter $index when calling addModuleUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/{id}/content/{moduleId}/add.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($index !== null) {
            $queryParams['index'] = $this->apiClient->getSerializer()->toQueryValue($index);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($module_id !== null) {
            $resourcePath = str_replace(
                "{" . "moduleId" . "}",
                $this->apiClient->getSerializer()->toPathValue($module_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($add_module_request)) {
            $_tempBody = $add_module_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ModelResponse',
                '/rest/asset/v1/email/{id}/content/{moduleId}/add.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ModelResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ModelResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation approveDraftUsingPOST
     *
     * Approve Email Draft
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfIdResponse
     */
    public function approveDraftUsingPOST($id)
    {
        list($response) = $this->approveDraftUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation approveDraftUsingPOSTWithHttpInfo
     *
     * Approve Email Draft
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function approveDraftUsingPOSTWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling approveDraftUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/{id}/approveDraft.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfIdResponse',
                '/rest/asset/v1/email/{id}/approveDraft.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfIdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfIdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloneEmailUsingPOST
     *
     * Clone Email
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\CloneEmailRequest $clone_email_request cloneEmailRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfEmailResponse
     */
    public function cloneEmailUsingPOST($id, $clone_email_request)
    {
        list($response) = $this->cloneEmailUsingPOSTWithHttpInfo($id, $clone_email_request);
        return $response;
    }

    /**
     * Operation cloneEmailUsingPOSTWithHttpInfo
     *
     * Clone Email
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\CloneEmailRequest $clone_email_request cloneEmailRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloneEmailUsingPOSTWithHttpInfo($id, $clone_email_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling cloneEmailUsingPOST');
        }
        // verify the required parameter 'clone_email_request' is set
        if ($clone_email_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clone_email_request when calling cloneEmailUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/{id}/clone.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($clone_email_request)) {
            $_tempBody = $clone_email_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfEmailResponse',
                '/rest/asset/v1/email/{id}/clone.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfEmailResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfEmailResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createEmailUsingPOST
     *
     * Create Email
     *
     * @param \CollingMedia\Client\Model\CreateEmailRequest $create_email_request createEmailRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfEmailResponse
     */
    public function createEmailUsingPOST($create_email_request)
    {
        list($response) = $this->createEmailUsingPOSTWithHttpInfo($create_email_request);
        return $response;
    }

    /**
     * Operation createEmailUsingPOSTWithHttpInfo
     *
     * Create Email
     *
     * @param \CollingMedia\Client\Model\CreateEmailRequest $create_email_request createEmailRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEmailUsingPOSTWithHttpInfo($create_email_request)
    {
        // verify the required parameter 'create_email_request' is set
        if ($create_email_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $create_email_request when calling createEmailUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/emails.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($create_email_request)) {
            $_tempBody = $create_email_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfEmailResponse',
                '/rest/asset/v1/emails.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfEmailResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfEmailResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteEmailUsingPOST
     *
     * Delete Email
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfIdResponse
     */
    public function deleteEmailUsingPOST($id)
    {
        list($response) = $this->deleteEmailUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteEmailUsingPOSTWithHttpInfo
     *
     * Delete Email
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailUsingPOSTWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteEmailUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/{id}/delete.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfIdResponse',
                '/rest/asset/v1/email/{id}/delete.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfIdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfIdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteModuleUsingPOST
     *
     * Delete Module
     *
     * @param int $id id (required)
     * @param string $module_id moduleId (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ModelResponse
     */
    public function deleteModuleUsingPOST($id, $module_id)
    {
        list($response) = $this->deleteModuleUsingPOSTWithHttpInfo($id, $module_id);
        return $response;
    }

    /**
     * Operation deleteModuleUsingPOSTWithHttpInfo
     *
     * Delete Module
     *
     * @param int $id id (required)
     * @param string $module_id moduleId (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ModelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteModuleUsingPOSTWithHttpInfo($id, $module_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteModuleUsingPOST');
        }
        // verify the required parameter 'module_id' is set
        if ($module_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $module_id when calling deleteModuleUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/{id}/content/{moduleId}/delete.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($module_id !== null) {
            $resourcePath = str_replace(
                "{" . "moduleId" . "}",
                $this->apiClient->getSerializer()->toPathValue($module_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ModelResponse',
                '/rest/asset/v1/email/{id}/content/{moduleId}/delete.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ModelResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ModelResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation discardDraftUsingPOST
     *
     * Discard Email Draft
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfIdResponse
     */
    public function discardDraftUsingPOST($id)
    {
        list($response) = $this->discardDraftUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation discardDraftUsingPOSTWithHttpInfo
     *
     * Discard Email Draft
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function discardDraftUsingPOSTWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling discardDraftUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/{id}/discardDraft.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfIdResponse',
                '/rest/asset/v1/email/{id}/discardDraft.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfIdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfIdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation duplicateModuleUsingPOST
     *
     * Duplicate Email Module
     *
     * @param int $id id (required)
     * @param string $module_id moduleId (required)
     * @param string $name Name of the new module (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ModelResponse
     */
    public function duplicateModuleUsingPOST($id, $module_id, $name)
    {
        list($response) = $this->duplicateModuleUsingPOSTWithHttpInfo($id, $module_id, $name);
        return $response;
    }

    /**
     * Operation duplicateModuleUsingPOSTWithHttpInfo
     *
     * Duplicate Email Module
     *
     * @param int $id id (required)
     * @param string $module_id moduleId (required)
     * @param string $name Name of the new module (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ModelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function duplicateModuleUsingPOSTWithHttpInfo($id, $module_id, $name)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling duplicateModuleUsingPOST');
        }
        // verify the required parameter 'module_id' is set
        if ($module_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $module_id when calling duplicateModuleUsingPOST');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling duplicateModuleUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/{id}/content/{moduleId}/duplicate.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($module_id !== null) {
            $resourcePath = str_replace(
                "{" . "moduleId" . "}",
                $this->apiClient->getSerializer()->toPathValue($module_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ModelResponse',
                '/rest/asset/v1/email/{id}/content/{moduleId}/duplicate.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ModelResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ModelResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEmailByIdUsingGET
     *
     * Get Email By Id
     *
     * @param int $id id (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfEmailResponse
     */
    public function getEmailByIdUsingGET($id, $status = null)
    {
        list($response) = $this->getEmailByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Operation getEmailByIdUsingGETWithHttpInfo
     *
     * Get Email By Id
     *
     * @param int $id id (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailByIdUsingGETWithHttpInfo($id, $status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getEmailByIdUsingGET');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/{id}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfEmailResponse',
                '/rest/asset/v1/email/{id}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfEmailResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfEmailResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEmailByNameUsingGET
     *
     * Get Email by Name
     *
     * @param string $name Name of the email (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @param string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfEmailResponse
     */
    public function getEmailByNameUsingGET($name, $status = null, $folder = null)
    {
        list($response) = $this->getEmailByNameUsingGETWithHttpInfo($name, $status, $folder);
        return $response;
    }

    /**
     * Operation getEmailByNameUsingGETWithHttpInfo
     *
     * Get Email by Name
     *
     * @param string $name Name of the email (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @param string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailByNameUsingGETWithHttpInfo($name, $status = null, $folder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getEmailByNameUsingGET');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/byName.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfEmailResponse',
                '/rest/asset/v1/email/byName.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfEmailResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfEmailResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEmailContentByIdUsingGET
     *
     * Get Email Content
     *
     * @param int $id id (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfEmailContentResponse
     */
    public function getEmailContentByIdUsingGET($id, $status = null)
    {
        list($response) = $this->getEmailContentByIdUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Operation getEmailContentByIdUsingGETWithHttpInfo
     *
     * Get Email Content
     *
     * @param int $id id (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfEmailContentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailContentByIdUsingGETWithHttpInfo($id, $status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getEmailContentByIdUsingGET');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/{id}/content";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfEmailContentResponse',
                '/rest/asset/v1/email/{id}/content'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfEmailContentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfEmailContentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEmailDynamicContentUsingGET
     *
     * Get Email Dynamic Content
     *
     * @param int $id id (required)
     * @param string $dynamic_content_id dynamicContentId (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfEmailDynamicContentResponse
     */
    public function getEmailDynamicContentUsingGET($id, $dynamic_content_id, $status = null)
    {
        list($response) = $this->getEmailDynamicContentUsingGETWithHttpInfo($id, $dynamic_content_id, $status);
        return $response;
    }

    /**
     * Operation getEmailDynamicContentUsingGETWithHttpInfo
     *
     * Get Email Dynamic Content
     *
     * @param int $id id (required)
     * @param string $dynamic_content_id dynamicContentId (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfEmailDynamicContentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailDynamicContentUsingGETWithHttpInfo($id, $dynamic_content_id, $status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getEmailDynamicContentUsingGET');
        }
        // verify the required parameter 'dynamic_content_id' is set
        if ($dynamic_content_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dynamic_content_id when calling getEmailDynamicContentUsingGET');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/{id}/dynamicContent/{dynamicContentId}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($dynamic_content_id !== null) {
            $resourcePath = str_replace(
                "{" . "dynamicContentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($dynamic_content_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfEmailDynamicContentResponse',
                '/rest/asset/v1/email/{id}/dynamicContent/{dynamicContentId}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfEmailDynamicContentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfEmailDynamicContentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEmailUsingGET
     *
     * Get Emails
     *
     * @param \CollingMedia\Client\Model\EmailRequest $email_request emailRequest (optional)
     * @param string $status Status filter for draft or approved versions (optional)
     * @param string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @param int $offset Integer offset for paging (optional)
     * @param int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfEmailResponse
     */
    public function getEmailUsingGET($email_request = null, $status = null, $folder = null, $offset = null, $max_return = null)
    {
        list($response) = $this->getEmailUsingGETWithHttpInfo($email_request, $status, $folder, $offset, $max_return);
        return $response;
    }

    /**
     * Operation getEmailUsingGETWithHttpInfo
     *
     * Get Emails
     *
     * @param \CollingMedia\Client\Model\EmailRequest $email_request emailRequest (optional)
     * @param string $status Status filter for draft or approved versions (optional)
     * @param string $folder JSON representation of parent folder, with members &#39;id&#39;, and &#39;type&#39; which may be &#39;Folder&#39; or &#39;Program&#39; (optional)
     * @param int $offset Integer offset for paging (optional)
     * @param int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailUsingGETWithHttpInfo($email_request = null, $status = null, $folder = null, $offset = null, $max_return = null)
    {
        // parse inputs
        $resourcePath = "/rest/asset/v1/emails.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = $this->apiClient->getSerializer()->toQueryValue($folder);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($max_return !== null) {
            $queryParams['maxReturn'] = $this->apiClient->getSerializer()->toQueryValue($max_return);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($email_request)) {
            $_tempBody = $email_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfEmailResponse',
                '/rest/asset/v1/emails.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfEmailResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfEmailResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEmailVariablesUsingGET
     *
     * Get Email Variables
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ModelResponse
     */
    public function getEmailVariablesUsingGET($id)
    {
        list($response) = $this->getEmailVariablesUsingGETWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getEmailVariablesUsingGETWithHttpInfo
     *
     * Get Email Variables
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ModelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailVariablesUsingGETWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getEmailVariablesUsingGET');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/{id}/variables.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ModelResponse',
                '/rest/asset/v1/email/{id}/variables.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ModelResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ModelResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation rearrangeModulesUsingPOST
     *
     * Rearrange Email Modules
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\RearrangeModulesRequest $rearrange_modules_request rearrangeModulesRequest (optional)
     * @param string $positions JSON array of module positions.  Each position must be a JSON object with members &#39;index&#39; and a &#39;moduleId&#39; (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ModelResponse
     */
    public function rearrangeModulesUsingPOST($id, $rearrange_modules_request = null, $positions = null)
    {
        list($response) = $this->rearrangeModulesUsingPOSTWithHttpInfo($id, $rearrange_modules_request, $positions);
        return $response;
    }

    /**
     * Operation rearrangeModulesUsingPOSTWithHttpInfo
     *
     * Rearrange Email Modules
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\RearrangeModulesRequest $rearrange_modules_request rearrangeModulesRequest (optional)
     * @param string $positions JSON array of module positions.  Each position must be a JSON object with members &#39;index&#39; and a &#39;moduleId&#39; (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ModelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function rearrangeModulesUsingPOSTWithHttpInfo($id, $rearrange_modules_request = null, $positions = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling rearrangeModulesUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/{id}/content/rearrange.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($rearrange_modules_request)) {
            $_tempBody = $rearrange_modules_request;
        }
// body params
        $_tempBody = null;
        if (isset($positions)) {
            $_tempBody = $positions;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ModelResponse',
                '/rest/asset/v1/email/{id}/content/rearrange.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ModelResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ModelResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation renameUsingPOST
     *
     * Rename Email Module
     *
     * @param int $id id (required)
     * @param string $module_id moduleId (required)
     * @param string $name New module name (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ModelResponse
     */
    public function renameUsingPOST($id, $module_id, $name)
    {
        list($response) = $this->renameUsingPOSTWithHttpInfo($id, $module_id, $name);
        return $response;
    }

    /**
     * Operation renameUsingPOSTWithHttpInfo
     *
     * Rename Email Module
     *
     * @param int $id id (required)
     * @param string $module_id moduleId (required)
     * @param string $name New module name (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ModelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function renameUsingPOSTWithHttpInfo($id, $module_id, $name)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling renameUsingPOST');
        }
        // verify the required parameter 'module_id' is set
        if ($module_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $module_id when calling renameUsingPOST');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling renameUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/{id}/content/{moduleId}/rename.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($module_id !== null) {
            $resourcePath = str_replace(
                "{" . "moduleId" . "}",
                $this->apiClient->getSerializer()->toPathValue($module_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ModelResponse',
                '/rest/asset/v1/email/{id}/content/{moduleId}/rename.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ModelResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ModelResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation sendSampleEmailUsingPOST
     *
     * Send Sample Email
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\SendSampleEmailRequest $send_sample_email_request sendSampleEmailRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfobject
     */
    public function sendSampleEmailUsingPOST($id, $send_sample_email_request)
    {
        list($response) = $this->sendSampleEmailUsingPOSTWithHttpInfo($id, $send_sample_email_request);
        return $response;
    }

    /**
     * Operation sendSampleEmailUsingPOSTWithHttpInfo
     *
     * Send Sample Email
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\SendSampleEmailRequest $send_sample_email_request sendSampleEmailRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfobject, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendSampleEmailUsingPOSTWithHttpInfo($id, $send_sample_email_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling sendSampleEmailUsingPOST');
        }
        // verify the required parameter 'send_sample_email_request' is set
        if ($send_sample_email_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $send_sample_email_request when calling sendSampleEmailUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/{id}/sendSample.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($send_sample_email_request)) {
            $_tempBody = $send_sample_email_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfobject',
                '/rest/asset/v1/email/{id}/sendSample.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfobject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfobject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation unapproveDraftUsingPOST
     *
     * Unapprove Email
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfIdResponse
     */
    public function unapproveDraftUsingPOST($id)
    {
        list($response) = $this->unapproveDraftUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation unapproveDraftUsingPOSTWithHttpInfo
     *
     * Unapprove Email
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function unapproveDraftUsingPOSTWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling unapproveDraftUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/{id}/unapprove.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfIdResponse',
                '/rest/asset/v1/email/{id}/unapprove.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfIdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfIdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateEmailComponentContentUsingPOST
     *
     * Update Email Content Section
     *
     * @param int $id id (required)
     * @param string $html_id htmlId (required)
     * @param \CollingMedia\Client\Model\UpdateEmailComponentContentRequest $request request (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfIdResponse
     */
    public function updateEmailComponentContentUsingPOST($id, $html_id, $request)
    {
        list($response) = $this->updateEmailComponentContentUsingPOSTWithHttpInfo($id, $html_id, $request);
        return $response;
    }

    /**
     * Operation updateEmailComponentContentUsingPOSTWithHttpInfo
     *
     * Update Email Content Section
     *
     * @param int $id id (required)
     * @param string $html_id htmlId (required)
     * @param \CollingMedia\Client\Model\UpdateEmailComponentContentRequest $request request (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailComponentContentUsingPOSTWithHttpInfo($id, $html_id, $request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateEmailComponentContentUsingPOST');
        }
        // verify the required parameter 'html_id' is set
        if ($html_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $html_id when calling updateEmailComponentContentUsingPOST');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling updateEmailComponentContentUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/{id}/content/{htmlId}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($html_id !== null) {
            $resourcePath = str_replace(
                "{" . "htmlId" . "}",
                $this->apiClient->getSerializer()->toPathValue($html_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfIdResponse',
                '/rest/asset/v1/email/{id}/content/{htmlId}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfIdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfIdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateEmailContentUsingPOST
     *
     * Update Email Content
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\UpdateEmailComponentDataRequest $update_email_request updateEmailRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfIdResponse
     */
    public function updateEmailContentUsingPOST($id, $update_email_request)
    {
        list($response) = $this->updateEmailContentUsingPOSTWithHttpInfo($id, $update_email_request);
        return $response;
    }

    /**
     * Operation updateEmailContentUsingPOSTWithHttpInfo
     *
     * Update Email Content
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\UpdateEmailComponentDataRequest $update_email_request updateEmailRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailContentUsingPOSTWithHttpInfo($id, $update_email_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateEmailContentUsingPOST');
        }
        // verify the required parameter 'update_email_request' is set
        if ($update_email_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update_email_request when calling updateEmailContentUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/{id}/content.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($update_email_request)) {
            $_tempBody = $update_email_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfIdResponse',
                '/rest/asset/v1/email/{id}/content.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfIdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfIdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateEmailDynamicContentUsingPOST
     *
     * Update Email Dynamic Content Section
     *
     * @param int $id id (required)
     * @param string $dynamic_content_id dynamicContentId (required)
     * @param \CollingMedia\Client\Model\UpdateEmailDynamicContentRequest $request request (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfIdResponse
     */
    public function updateEmailDynamicContentUsingPOST($id, $dynamic_content_id, $request)
    {
        list($response) = $this->updateEmailDynamicContentUsingPOSTWithHttpInfo($id, $dynamic_content_id, $request);
        return $response;
    }

    /**
     * Operation updateEmailDynamicContentUsingPOSTWithHttpInfo
     *
     * Update Email Dynamic Content Section
     *
     * @param int $id id (required)
     * @param string $dynamic_content_id dynamicContentId (required)
     * @param \CollingMedia\Client\Model\UpdateEmailDynamicContentRequest $request request (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailDynamicContentUsingPOSTWithHttpInfo($id, $dynamic_content_id, $request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateEmailDynamicContentUsingPOST');
        }
        // verify the required parameter 'dynamic_content_id' is set
        if ($dynamic_content_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dynamic_content_id when calling updateEmailDynamicContentUsingPOST');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling updateEmailDynamicContentUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/{id}/dynamicContent/{dynamicContentId}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($dynamic_content_id !== null) {
            $resourcePath = str_replace(
                "{" . "dynamicContentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($dynamic_content_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfIdResponse',
                '/rest/asset/v1/email/{id}/dynamicContent/{dynamicContentId}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfIdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfIdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateEmailUsingPOST
     *
     * Update Email Metadata
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\UpdateEmailMetaDataRequest $update_email_request updateEmailRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfEmailResponse
     */
    public function updateEmailUsingPOST($id, $update_email_request)
    {
        list($response) = $this->updateEmailUsingPOSTWithHttpInfo($id, $update_email_request);
        return $response;
    }

    /**
     * Operation updateEmailUsingPOSTWithHttpInfo
     *
     * Update Email Metadata
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\UpdateEmailMetaDataRequest $update_email_request updateEmailRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailUsingPOSTWithHttpInfo($id, $update_email_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateEmailUsingPOST');
        }
        // verify the required parameter 'update_email_request' is set
        if ($update_email_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update_email_request when calling updateEmailUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/{id}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($update_email_request)) {
            $_tempBody = $update_email_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfEmailResponse',
                '/rest/asset/v1/email/{id}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfEmailResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfEmailResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateVariableUsingPOST
     *
     * Update Email Variable
     *
     * @param int $id id (required)
     * @param string $name name (required)
     * @param \CollingMedia\Client\Model\UpdateVariableRequest $update_variable_request updateVariableRequest (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ModelResponse
     */
    public function updateVariableUsingPOST($id, $name, $update_variable_request = null)
    {
        list($response) = $this->updateVariableUsingPOSTWithHttpInfo($id, $name, $update_variable_request);
        return $response;
    }

    /**
     * Operation updateVariableUsingPOSTWithHttpInfo
     *
     * Update Email Variable
     *
     * @param int $id id (required)
     * @param string $name name (required)
     * @param \CollingMedia\Client\Model\UpdateVariableRequest $update_variable_request updateVariableRequest (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ModelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateVariableUsingPOSTWithHttpInfo($id, $name, $update_variable_request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateVariableUsingPOST');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateVariableUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/email/{id}/variable/{name}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($update_variable_request)) {
            $_tempBody = $update_variable_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ModelResponse',
                '/rest/asset/v1/email/{id}/variable/{name}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ModelResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ModelResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
