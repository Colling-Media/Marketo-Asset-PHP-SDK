<?php
/**
 * ProgramsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CollingMedia\Client\Api;

use \CollingMedia\Client\ApiClient;
use \CollingMedia\Client\ApiException;
use \CollingMedia\Client\Configuration;
use \CollingMedia\Client\ObjectSerializer;

/**
 * ProgramsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProgramsApi
{
    /**
     * API Client
     *
     * @var \CollingMedia\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \CollingMedia\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\CollingMedia\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \CollingMedia\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \CollingMedia\Client\ApiClient $apiClient set the API client
     *
     * @return ProgramsApi
     */
    public function setApiClient(\CollingMedia\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation approveProgramUsingPOST
     *
     * Approve Program
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfIdResponse
     */
    public function approveProgramUsingPOST($id)
    {
        list($response) = $this->approveProgramUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation approveProgramUsingPOSTWithHttpInfo
     *
     * Approve Program
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function approveProgramUsingPOSTWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling approveProgramUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/program/{id}/approve.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfIdResponse',
                '/rest/asset/v1/program/{id}/approve.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfIdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfIdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation browseProgramsUsingGET
     *
     * Get Programs
     *
     * @param int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param int $offset Integer offset for paging (optional)
     * @param string $filter_type Optional filter.  Requires filterValues (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfBrowseAllPrograms
     */
    public function browseProgramsUsingGET($max_return = null, $offset = null, $filter_type = null)
    {
        list($response) = $this->browseProgramsUsingGETWithHttpInfo($max_return, $offset, $filter_type);
        return $response;
    }

    /**
     * Operation browseProgramsUsingGETWithHttpInfo
     *
     * Get Programs
     *
     * @param int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param int $offset Integer offset for paging (optional)
     * @param string $filter_type Optional filter.  Requires filterValues (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfBrowseAllPrograms, HTTP status code, HTTP response headers (array of strings)
     */
    public function browseProgramsUsingGETWithHttpInfo($max_return = null, $offset = null, $filter_type = null)
    {
        // parse inputs
        $resourcePath = "/rest/asset/v1/programs.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($max_return !== null) {
            $queryParams['maxReturn'] = $this->apiClient->getSerializer()->toQueryValue($max_return);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($filter_type !== null) {
            $queryParams['filterType'] = $this->apiClient->getSerializer()->toQueryValue($filter_type);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfBrowseAllPrograms',
                '/rest/asset/v1/programs.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfBrowseAllPrograms', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfBrowseAllPrograms', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cloneProgramUsingPOST
     *
     * Clone Program
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\CloneProgramRequest $clone_program_request cloneProgramRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfProgramResponse
     */
    public function cloneProgramUsingPOST($id, $clone_program_request)
    {
        list($response) = $this->cloneProgramUsingPOSTWithHttpInfo($id, $clone_program_request);
        return $response;
    }

    /**
     * Operation cloneProgramUsingPOSTWithHttpInfo
     *
     * Clone Program
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\CloneProgramRequest $clone_program_request cloneProgramRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfProgramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloneProgramUsingPOSTWithHttpInfo($id, $clone_program_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling cloneProgramUsingPOST');
        }
        // verify the required parameter 'clone_program_request' is set
        if ($clone_program_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clone_program_request when calling cloneProgramUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/program/{id}/clone.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($clone_program_request)) {
            $_tempBody = $clone_program_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfProgramResponse',
                '/rest/asset/v1/program/{id}/clone.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfProgramResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfProgramResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createProgramUsingPOST
     *
     * Create Program
     *
     * @param \CollingMedia\Client\Model\CreateProgramRequest $create_program_request createProgramRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfProgramResponse
     */
    public function createProgramUsingPOST($create_program_request)
    {
        list($response) = $this->createProgramUsingPOSTWithHttpInfo($create_program_request);
        return $response;
    }

    /**
     * Operation createProgramUsingPOSTWithHttpInfo
     *
     * Create Program
     *
     * @param \CollingMedia\Client\Model\CreateProgramRequest $create_program_request createProgramRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfProgramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProgramUsingPOSTWithHttpInfo($create_program_request)
    {
        // verify the required parameter 'create_program_request' is set
        if ($create_program_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $create_program_request when calling createProgramUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/programs.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($create_program_request)) {
            $_tempBody = $create_program_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfProgramResponse',
                '/rest/asset/v1/programs.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfProgramResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfProgramResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteProgramUsingPOST
     *
     * Delete Program
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfIdResponse
     */
    public function deleteProgramUsingPOST($id)
    {
        list($response) = $this->deleteProgramUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteProgramUsingPOSTWithHttpInfo
     *
     * Delete Program
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProgramUsingPOSTWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteProgramUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/program/{id}/delete.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfIdResponse',
                '/rest/asset/v1/program/{id}/delete.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfIdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfIdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProgramByIdUsingGET
     *
     * Get Program by Id
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfProgramResponse
     */
    public function getProgramByIdUsingGET($id)
    {
        list($response) = $this->getProgramByIdUsingGETWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getProgramByIdUsingGETWithHttpInfo
     *
     * Get Program by Id
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfProgramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProgramByIdUsingGETWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getProgramByIdUsingGET');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/program/{id}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfProgramResponse',
                '/rest/asset/v1/program/{id}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfProgramResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfProgramResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProgramByNameUsingGET
     *
     * Get Program by Name
     *
     * @param string $name Name of the program (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfProgramResponse
     */
    public function getProgramByNameUsingGET($name = null)
    {
        list($response) = $this->getProgramByNameUsingGETWithHttpInfo($name);
        return $response;
    }

    /**
     * Operation getProgramByNameUsingGETWithHttpInfo
     *
     * Get Program by Name
     *
     * @param string $name Name of the program (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfProgramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProgramByNameUsingGETWithHttpInfo($name = null)
    {
        // parse inputs
        $resourcePath = "/rest/asset/v1/program/byName.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfProgramResponse',
                '/rest/asset/v1/program/byName.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfProgramResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfProgramResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProgramListByTagUsingGET
     *
     * Get Programs by Tag
     *
     * @param string $tag_type Type of program tag (required)
     * @param string $tag_value Value of the tag (required)
     * @param int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param int $offset Integer offset for paging (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfProgramResponse
     */
    public function getProgramListByTagUsingGET($tag_type, $tag_value, $max_return = null, $offset = null)
    {
        list($response) = $this->getProgramListByTagUsingGETWithHttpInfo($tag_type, $tag_value, $max_return, $offset);
        return $response;
    }

    /**
     * Operation getProgramListByTagUsingGETWithHttpInfo
     *
     * Get Programs by Tag
     *
     * @param string $tag_type Type of program tag (required)
     * @param string $tag_value Value of the tag (required)
     * @param int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param int $offset Integer offset for paging (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfProgramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProgramListByTagUsingGETWithHttpInfo($tag_type, $tag_value, $max_return = null, $offset = null)
    {
        // verify the required parameter 'tag_type' is set
        if ($tag_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tag_type when calling getProgramListByTagUsingGET');
        }
        // verify the required parameter 'tag_value' is set
        if ($tag_value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tag_value when calling getProgramListByTagUsingGET');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/program/byTag.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($tag_type !== null) {
            $queryParams['tagType'] = $this->apiClient->getSerializer()->toQueryValue($tag_type);
        }
        // query params
        if ($tag_value !== null) {
            $queryParams['tagValue'] = $this->apiClient->getSerializer()->toQueryValue($tag_value);
        }
        // query params
        if ($max_return !== null) {
            $queryParams['maxReturn'] = $this->apiClient->getSerializer()->toQueryValue($max_return);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfProgramResponse',
                '/rest/asset/v1/program/byTag.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfProgramResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfProgramResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation unapproveProgramUsingPOST
     *
     * Unapprove Program
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfIdResponse
     */
    public function unapproveProgramUsingPOST($id)
    {
        list($response) = $this->unapproveProgramUsingPOSTWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation unapproveProgramUsingPOSTWithHttpInfo
     *
     * Unapprove Program
     *
     * @param int $id id (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function unapproveProgramUsingPOSTWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling unapproveProgramUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/program/{id}/unapprove.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfIdResponse',
                '/rest/asset/v1/program/{id}/unapprove.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfIdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfIdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateProgramUsingPOST
     *
     * Update Program Metadata
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\UpdateProgramRequest $update_program_request updateProgramRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfProgramResponse
     */
    public function updateProgramUsingPOST($id, $update_program_request)
    {
        list($response) = $this->updateProgramUsingPOSTWithHttpInfo($id, $update_program_request);
        return $response;
    }

    /**
     * Operation updateProgramUsingPOSTWithHttpInfo
     *
     * Update Program Metadata
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\UpdateProgramRequest $update_program_request updateProgramRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfProgramResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProgramUsingPOSTWithHttpInfo($id, $update_program_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateProgramUsingPOST');
        }
        // verify the required parameter 'update_program_request' is set
        if ($update_program_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update_program_request when calling updateProgramUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/program/{id}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($update_program_request)) {
            $_tempBody = $update_program_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfProgramResponse',
                '/rest/asset/v1/program/{id}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfProgramResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfProgramResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
