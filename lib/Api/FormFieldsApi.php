<?php
/**
 * FormFieldsApi
 * PHP version 5
 *
 * @category Class
 * @package  CollingMedia\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CollingMedia\Client\Api;

use \CollingMedia\Client\ApiClient;
use \CollingMedia\Client\ApiException;
use \CollingMedia\Client\Configuration;
use \CollingMedia\Client\ObjectSerializer;

/**
 * FormFieldsApi Class Doc Comment
 *
 * @category Class
 * @package  CollingMedia\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FormFieldsApi
{
    /**
     * API Client
     *
     * @var \CollingMedia\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \CollingMedia\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\CollingMedia\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \CollingMedia\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \CollingMedia\Client\ApiClient $apiClient set the API client
     *
     * @return FormFieldsApi
     */
    public function setApiClient(\CollingMedia\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addFieldSetUsingPOST
     *
     * Add Fieldset to Form
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\AddFormFieldSetRequest $add_form_field_set_request addFormFieldSetRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfLpFormFieldResponse
     */
    public function addFieldSetUsingPOST($id, $add_form_field_set_request)
    {
        list($response) = $this->addFieldSetUsingPOSTWithHttpInfo($id, $add_form_field_set_request);
        return $response;
    }

    /**
     * Operation addFieldSetUsingPOSTWithHttpInfo
     *
     * Add Fieldset to Form
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\AddFormFieldSetRequest $add_form_field_set_request addFormFieldSetRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfLpFormFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addFieldSetUsingPOSTWithHttpInfo($id, $add_form_field_set_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addFieldSetUsingPOST');
        }
        // verify the required parameter 'add_form_field_set_request' is set
        if ($add_form_field_set_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $add_form_field_set_request when calling addFieldSetUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/form/{id}/fieldSet.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($add_form_field_set_request)) {
            $_tempBody = $add_form_field_set_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfLpFormFieldResponse',
                '/rest/asset/v1/form/{id}/fieldSet.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfLpFormFieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfLpFormFieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addFieldToAFormUsingPOST
     *
     * Add Field to Form
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\AddFormFieldRequest $add_form_field_set_request addFormFieldSetRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfLpFormFieldResponse
     */
    public function addFieldToAFormUsingPOST($id, $add_form_field_set_request)
    {
        list($response) = $this->addFieldToAFormUsingPOSTWithHttpInfo($id, $add_form_field_set_request);
        return $response;
    }

    /**
     * Operation addFieldToAFormUsingPOSTWithHttpInfo
     *
     * Add Field to Form
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\AddFormFieldRequest $add_form_field_set_request addFormFieldSetRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfLpFormFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addFieldToAFormUsingPOSTWithHttpInfo($id, $add_form_field_set_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addFieldToAFormUsingPOST');
        }
        // verify the required parameter 'add_form_field_set_request' is set
        if ($add_form_field_set_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $add_form_field_set_request when calling addFieldToAFormUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/form/{id}/fields.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($add_form_field_set_request)) {
            $_tempBody = $add_form_field_set_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfLpFormFieldResponse',
                '/rest/asset/v1/form/{id}/fields.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfLpFormFieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfLpFormFieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addFormFieldVisibilityRuleUsingPOST
     *
     * Add Form Field Visibility Rules
     *
     * @param int $form_id formId (required)
     * @param string $field_id fieldId (required)
     * @param \CollingMedia\Client\Model\AddFormFieldVisibilityRequest $add_form_field_visibility_request addFormFieldVisibilityRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfFormVisibilityRuleResponse
     */
    public function addFormFieldVisibilityRuleUsingPOST($form_id, $field_id, $add_form_field_visibility_request)
    {
        list($response) = $this->addFormFieldVisibilityRuleUsingPOSTWithHttpInfo($form_id, $field_id, $add_form_field_visibility_request);
        return $response;
    }

    /**
     * Operation addFormFieldVisibilityRuleUsingPOSTWithHttpInfo
     *
     * Add Form Field Visibility Rules
     *
     * @param int $form_id formId (required)
     * @param string $field_id fieldId (required)
     * @param \CollingMedia\Client\Model\AddFormFieldVisibilityRequest $add_form_field_visibility_request addFormFieldVisibilityRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfFormVisibilityRuleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addFormFieldVisibilityRuleUsingPOSTWithHttpInfo($form_id, $field_id, $add_form_field_visibility_request)
    {
        // verify the required parameter 'form_id' is set
        if ($form_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $form_id when calling addFormFieldVisibilityRuleUsingPOST');
        }
        // verify the required parameter 'field_id' is set
        if ($field_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $field_id when calling addFormFieldVisibilityRuleUsingPOST');
        }
        // verify the required parameter 'add_form_field_visibility_request' is set
        if ($add_form_field_visibility_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $add_form_field_visibility_request when calling addFormFieldVisibilityRuleUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/form/{formId}/field/{fieldId}/visibility.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                "{" . "formId" . "}",
                $this->apiClient->getSerializer()->toPathValue($form_id),
                $resourcePath
            );
        }
        // path params
        if ($field_id !== null) {
            $resourcePath = str_replace(
                "{" . "fieldId" . "}",
                $this->apiClient->getSerializer()->toPathValue($field_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($add_form_field_visibility_request)) {
            $_tempBody = $add_form_field_visibility_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfFormVisibilityRuleResponse',
                '/rest/asset/v1/form/{formId}/field/{fieldId}/visibility.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfFormVisibilityRuleResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfFormVisibilityRuleResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addRichTextFieldUsingPOST
     *
     * Add Rich Text Field
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\AddRichTextRequest $add_rich_text_request addRichTextRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfLpFormFieldResponse
     */
    public function addRichTextFieldUsingPOST($id, $add_rich_text_request)
    {
        list($response) = $this->addRichTextFieldUsingPOSTWithHttpInfo($id, $add_rich_text_request);
        return $response;
    }

    /**
     * Operation addRichTextFieldUsingPOSTWithHttpInfo
     *
     * Add Rich Text Field
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\AddRichTextRequest $add_rich_text_request addRichTextRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfLpFormFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addRichTextFieldUsingPOSTWithHttpInfo($id, $add_rich_text_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addRichTextFieldUsingPOST');
        }
        // verify the required parameter 'add_rich_text_request' is set
        if ($add_rich_text_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $add_rich_text_request when calling addRichTextFieldUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/form/{id}/richText.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($add_rich_text_request)) {
            $_tempBody = $add_rich_text_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfLpFormFieldResponse',
                '/rest/asset/v1/form/{id}/richText.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfLpFormFieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfLpFormFieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteFormFieldFromFieldSetUsingPOST
     *
     * Delete Field from Fieldset
     *
     * @param int $id id (required)
     * @param string $field_set_id fieldSetId (required)
     * @param string $field_id fieldId (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfIdResponse
     */
    public function deleteFormFieldFromFieldSetUsingPOST($id, $field_set_id, $field_id)
    {
        list($response) = $this->deleteFormFieldFromFieldSetUsingPOSTWithHttpInfo($id, $field_set_id, $field_id);
        return $response;
    }

    /**
     * Operation deleteFormFieldFromFieldSetUsingPOSTWithHttpInfo
     *
     * Delete Field from Fieldset
     *
     * @param int $id id (required)
     * @param string $field_set_id fieldSetId (required)
     * @param string $field_id fieldId (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFormFieldFromFieldSetUsingPOSTWithHttpInfo($id, $field_set_id, $field_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteFormFieldFromFieldSetUsingPOST');
        }
        // verify the required parameter 'field_set_id' is set
        if ($field_set_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $field_set_id when calling deleteFormFieldFromFieldSetUsingPOST');
        }
        // verify the required parameter 'field_id' is set
        if ($field_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $field_id when calling deleteFormFieldFromFieldSetUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/form/{id}/fieldSet/{fieldSetId}/field/{fieldId}/delete.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($field_set_id !== null) {
            $resourcePath = str_replace(
                "{" . "fieldSetId" . "}",
                $this->apiClient->getSerializer()->toPathValue($field_set_id),
                $resourcePath
            );
        }
        // path params
        if ($field_id !== null) {
            $resourcePath = str_replace(
                "{" . "fieldId" . "}",
                $this->apiClient->getSerializer()->toPathValue($field_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfIdResponse',
                '/rest/asset/v1/form/{id}/fieldSet/{fieldSetId}/field/{fieldId}/delete.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfIdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfIdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteFormFieldUsingPOST
     *
     * Delete Form Field
     *
     * @param int $id id (required)
     * @param string $field_id fieldId (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfIdResponse
     */
    public function deleteFormFieldUsingPOST($id, $field_id)
    {
        list($response) = $this->deleteFormFieldUsingPOSTWithHttpInfo($id, $field_id);
        return $response;
    }

    /**
     * Operation deleteFormFieldUsingPOSTWithHttpInfo
     *
     * Delete Form Field
     *
     * @param int $id id (required)
     * @param string $field_id fieldId (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFormFieldUsingPOSTWithHttpInfo($id, $field_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteFormFieldUsingPOST');
        }
        // verify the required parameter 'field_id' is set
        if ($field_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $field_id when calling deleteFormFieldUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/form/{id}/field/{fieldId}/delete.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($field_id !== null) {
            $resourcePath = str_replace(
                "{" . "fieldId" . "}",
                $this->apiClient->getSerializer()->toPathValue($field_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfIdResponse',
                '/rest/asset/v1/form/{id}/field/{fieldId}/delete.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfIdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfIdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllFieldsUsingGET
     *
     * Get Available Form Fields
     *
     * @param int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param int $offset Integer offset for paging (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfFieldsMetaDataResponse
     */
    public function getAllFieldsUsingGET($max_return = null, $offset = null)
    {
        list($response) = $this->getAllFieldsUsingGETWithHttpInfo($max_return, $offset);
        return $response;
    }

    /**
     * Operation getAllFieldsUsingGETWithHttpInfo
     *
     * Get Available Form Fields
     *
     * @param int $max_return Maximum number of channels to return.  Max 200, default 20 (optional)
     * @param int $offset Integer offset for paging (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfFieldsMetaDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllFieldsUsingGETWithHttpInfo($max_return = null, $offset = null)
    {
        // parse inputs
        $resourcePath = "/rest/asset/v1/form/fields.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($max_return !== null) {
            $queryParams['maxReturn'] = $this->apiClient->getSerializer()->toQueryValue($max_return);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfFieldsMetaDataResponse',
                '/rest/asset/v1/form/fields.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfFieldsMetaDataResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfFieldsMetaDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFormFieldByFormVidUsingGET
     *
     * Get Fields for Form
     *
     * @param int $id id (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfLpFormFieldResponse
     */
    public function getFormFieldByFormVidUsingGET($id, $status = null)
    {
        list($response) = $this->getFormFieldByFormVidUsingGETWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Operation getFormFieldByFormVidUsingGETWithHttpInfo
     *
     * Get Fields for Form
     *
     * @param int $id id (required)
     * @param string $status Status filter for draft or approved versions (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfLpFormFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFormFieldByFormVidUsingGETWithHttpInfo($id, $status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getFormFieldByFormVidUsingGET');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/form/{id}/fields.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfLpFormFieldResponse',
                '/rest/asset/v1/form/{id}/fields.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfLpFormFieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfLpFormFieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateFieldPositionsUsingPOST
     *
     * Update Field Positions
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\ReArrangeRequest $re_arrange_request reArrangeRequest (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfIdResponse
     */
    public function updateFieldPositionsUsingPOST($id, $re_arrange_request = null)
    {
        list($response) = $this->updateFieldPositionsUsingPOSTWithHttpInfo($id, $re_arrange_request);
        return $response;
    }

    /**
     * Operation updateFieldPositionsUsingPOSTWithHttpInfo
     *
     * Update Field Positions
     *
     * @param int $id id (required)
     * @param \CollingMedia\Client\Model\ReArrangeRequest $re_arrange_request reArrangeRequest (optional)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFieldPositionsUsingPOSTWithHttpInfo($id, $re_arrange_request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateFieldPositionsUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/form/{id}/reArrange.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($re_arrange_request)) {
            $_tempBody = $re_arrange_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfIdResponse',
                '/rest/asset/v1/form/{id}/reArrange.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfIdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfIdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateFormFieldUsingPOST
     *
     * Update Form Field
     *
     * @param int $id id (required)
     * @param string $field_id fieldId (required)
     * @param \CollingMedia\Client\Model\UpdateFormFieldRequest $update_form_field_request updateFormFieldRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return \CollingMedia\Client\Model\ResponseOfLpFormFieldResponse
     */
    public function updateFormFieldUsingPOST($id, $field_id, $update_form_field_request)
    {
        list($response) = $this->updateFormFieldUsingPOSTWithHttpInfo($id, $field_id, $update_form_field_request);
        return $response;
    }

    /**
     * Operation updateFormFieldUsingPOSTWithHttpInfo
     *
     * Update Form Field
     *
     * @param int $id id (required)
     * @param string $field_id fieldId (required)
     * @param \CollingMedia\Client\Model\UpdateFormFieldRequest $update_form_field_request updateFormFieldRequest (required)
     * @throws \CollingMedia\Client\ApiException on non-2xx response
     * @return array of \CollingMedia\Client\Model\ResponseOfLpFormFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFormFieldUsingPOSTWithHttpInfo($id, $field_id, $update_form_field_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateFormFieldUsingPOST');
        }
        // verify the required parameter 'field_id' is set
        if ($field_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $field_id when calling updateFormFieldUsingPOST');
        }
        // verify the required parameter 'update_form_field_request' is set
        if ($update_form_field_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update_form_field_request when calling updateFormFieldUsingPOST');
        }
        // parse inputs
        $resourcePath = "/rest/asset/v1/form/{id}/field/{fieldId}.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($field_id !== null) {
            $resourcePath = str_replace(
                "{" . "fieldId" . "}",
                $this->apiClient->getSerializer()->toPathValue($field_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($update_form_field_request)) {
            $_tempBody = $update_form_field_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CollingMedia\Client\Model\ResponseOfLpFormFieldResponse',
                '/rest/asset/v1/form/{id}/field/{fieldId}.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CollingMedia\Client\Model\ResponseOfLpFormFieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CollingMedia\Client\Model\ResponseOfLpFormFieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
